name: Update flake.lock

on:
  schedule:
    - cron: '0 6 * * 1'  # Weekly on Monday at 6 AM UTC
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  update-flake-lock:
    name: Update flake.lock
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: DeterminateSystems/nix-installer-action@main
      
      - uses: DeterminateSystems/magic-nix-cache-action@main
      
      - name: Update flake.lock
        id: update
        run: |
          nix flake update
          
          # Check if anything changed
          if git diff --quiet flake.lock; then
            echo "No changes to flake.lock"
            echo "updated=false" >> $GITHUB_OUTPUT
          else
            echo "flake.lock was updated"
            echo "updated=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Validate flake after update
        if: steps.update.outputs.updated == 'true'
        run: |
          echo "üîç Validating flake structure..."
          nix flake check --all-systems --no-update-lock-file
          
          echo "‚úÖ Flake check passed"
      
      - name: Test build example configurations
        if: steps.update.outputs.updated == 'true'
        run: |
          echo "üî® Testing builds to catch dependency conflicts..."
          echo ""
          
          # Test formatter (quick sanity check)
          echo "‚Üí Building formatter..."
          nix build .#formatter --print-out-paths
          
          # Test all devShells
          echo "‚Üí Building devShells..."
          nix build .#devShells.x86_64-linux.default --print-out-paths
          nix build .#devShells.x86_64-linux.rust --print-out-paths
          nix build .#devShells.x86_64-linux.qml --print-out-paths
          nix build .#devShells.x86_64-linux.zig --print-out-paths
          
          # Test packages
          echo "‚Üí Building packages..."
          nix build .#packages.x86_64-linux.pwa-apps --print-out-paths
          
          # Test init app
          echo "‚Üí Testing init app..."
          nix build .#apps.x86_64-linux.init --print-out-paths
          
          echo ""
          echo "‚úÖ All axios exports built successfully"
          echo ""
          echo "‚ö†Ô∏è  NOTE: These tests only validate axios exports (packages, devShells, apps)."
          echo "They do NOT test NixOS modules or catch issues like niri dependency conflicts."
          echo "Manual testing with ./scripts/test-pr.sh is REQUIRED to test full configurations."
      
      - name: Show flake metadata
        if: steps.update.outputs.updated == 'true'
        run: |
          echo "üìä Flake metadata:"
          nix flake metadata
      
      - name: Create Pull Request
        if: steps.update.outputs.updated == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update flake.lock"
          title: "chore: update flake.lock"
          body: |
            Automated flake.lock update
            
            ## ‚úÖ Automated Validation Results
            - ‚úÖ Flake check passed on all systems
            - ‚úÖ All axios exports built successfully:
              - formatter ‚úì
              - devShells (default, rust, qml, zig) ‚úì
              - packages (pwa-apps) ‚úì
              - apps (init) ‚úì
            
            ## ‚ö†Ô∏è Important: CI Limitations
            **The CI tests above only build axios exports.** They do NOT test:
            - ‚ùå NixOS modules (desktop, wayland, services, etc.)
            - ‚ùå Full system configurations
            - ‚ùå Dependencies used only in modules (like niri)
            
            **This means CI can pass but real builds can still fail!**
            
            Example: The niri/libdisplay-info conflict would NOT be caught by CI
            because niri is only used in NixOS modules, not in the packages CI builds.
            
            ## ‚úÖ Manual Testing Required
            You **MUST** run `./scripts/test-pr.sh` which builds a real NixOS configuration.
            This is the only way to catch module-specific dependency conflicts.
            
            ## Testing Procedure
            ```bash
            # 1. Checkout this PR
            gh pr checkout ${{ github.event.pull_request.number }}
            
            # 2. Run the validation script
            ./scripts/test-pr.sh
            
            # 3. Review the results
            # If tests pass ‚Üí merge
            # If tests fail ‚Üí close PR and investigate
            ```
            
            ## What Changed
            Review the flake.lock diff to see which inputs were updated.
            Pay special attention to:
            - Major version bumps in nixpkgs
            - Updates to critical packages (niri, home-manager, etc.)
            - Large numbers of input changes
            
            ## If Build Fails
            - Check upstream GitHub issues for affected packages
            - Wait for fixes before merging
            - Test again with `./scripts/test-pr.sh`
          branch: update_flake_lock_action
          delete-branch: true
          labels: |
            dependencies
            automated
