# Example User Configuration
#
# This is an example showing how to create a new user.
# To use this template:
# 1. Copy this file to modules/users/[username].nix
# 2. Replace the values in the let block
# 3. Uncomment and customize optional sections
# 4. Rebuild your system
#
# This file is not imported (it ends in .nix.example) and serves as documentation.

{ self
, config
, ...
}:
let
  # === User Configuration ===
  # Replace these values with the actual user information
  username = "alice";
  fullName = "Alice Smith";
  email = "alice@example.com";
  homeDir = "/home/${username}";
in
{
  # === System User Account ===
  users.users.${username} = {
    isNormalUser = true;
    description = fullName;
    
    # System groups for permissions
    # Customize based on what the user needs access to
    extraGroups = [
      "networkmanager"  # Network configuration
      "wheel"           # Sudo access
      
      # Optional groups (uncomment as needed):
      # "kvm"           # KVM virtualization
      # "input"         # Input devices
      # "disk"          # Disk management
      # "libvirtd"      # Libvirt virtualization
      # "video"         # Video devices
      # "audio"         # Audio devices
      # "lp"            # Printing
      # "scanner"       # Scanner access
    ];
    
    # Optional: Set initial password (use mkpasswd to generate hash)
    # hashedPassword = "$6$rounds=656000$...";
    
    # Optional: Set SSH authorized keys
    # openssh.authorizedKeys.keys = [
    #   "ssh-ed25519 AAAAC3... user@host"
    # ];
  };

  # === Home Manager Configuration ===
  home-manager.users.${username} = {
    home = {
      stateVersion = "24.05";  # Match your NixOS version
      homeDirectory = homeDir;
      username = username;
    };

    nixpkgs = {
      config = {
        allowUnfree = true;  # Allow proprietary packages
        allowBroken = false;
        allowUnsupportedSystem = false;
      };
      overlays = [
        self.overlays.default
      ];
    };

    # === User-Specific Application Configs ===
    
    # Git configuration
    programs.git = {
      userName = fullName;
      userEmail = email;
    };

    # Optional: User-specific Niri background
    # This displays a blurred wallpaper in the Niri overview mode
    # The blur is generated by Dank Hooks from DankMaterialShell
    # Requires: https://github.com/kcalvelli/scripts
    # See docs/NIRI_WALLPAPER.md for complete setup details
    # programs.niri.settings.spawn-at-startup = [
    #   { 
    #     command = [ 
    #       "swaybg" 
    #       "--mode" "stretch" 
    #       "--image" "${homeDir}/.cache/niri/wallpaper.jpg" 
    #     ]; 
    #   }
    # ];

    # Optional: User-specific shell aliases
    # programs.fish.shellAliases = {
    #   myalias = "command";
    # };
  };

  # === Optional: Samba Shares ===
  # Uncomment to create user-specific samba shares
  # services.samba = {
  #   enable = true;
  #   settings = {
  #     "alice-music" = {
  #       "path" = "${homeDir}/Music";
  #       "writable" = "yes";
  #       "guest ok" = "no";
  #     };
  #     "alice-documents" = {
  #       "path" = "${homeDir}/Documents";
  #       "writable" = "yes";
  #       "guest ok" = "no";
  #     };
  #   };
  # };

  # === Optional: Trusted User ===
  # Uncomment to allow user to run nix commands without sudo
  # nix.settings = {
  #   trusted-users = [ username ];
  # };

  # === Optional: User-Specific Services ===
  # Add any user-specific systemd services here
  # systemd.user.services.my-service = {
  #   description = "My user service";
  #   wantedBy = [ "default.target" ];
  #   serviceConfig = {
  #     ExecStart = "${pkgs.somePackage}/bin/command";
  #   };
  # };
}
